# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
    # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
    build:
        # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
        # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
        docker:
          # See: https://circleci.com/developer/images/image/cimg/openjdk
          - image: cimg/openjdk:17.0

        resource_class: small

        working_directory: ~/repo

        # Add steps to the job
        # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
        steps:
            # Checkout the code as the first step.
            - checkout

            # Download and cache dependencies
            - restore_cache:
                  keys:
                      - v1-dependencies-{{ checksum "pom.xml" }}
                      # fallback to using the latest cache if no exact match is found
                      - v1-dependencies-

            - run: mvn dependency:go-offline

            - save_cache:
                  paths:
                      - ~/.m2
                  key: v1-dependencies-{{ checksum "pom.xml" }}

#            # Use mvn clean and package as the standard maven build phase
#            - run:
#                name: Build
#                command: mvn -B -DskipTests clean package
#
#            # Then run your tests!
#            - run:
#                name: Test
#                command: mvn integration-test

            - when:
                  # when not master => pull request created => snapshot build and test
                  condition:
                        not:
                            equal: [ master, << pipeline.git.branch >> ]
                  steps:
                      - run: echo "will deploy (build and test as well) the artifact's snapshot to the artifact repo"
                      - run:
                          name: Maven Deploy (Snapshot, build and test as well)
                          command: mvn deploy -s .circleci/settings.xml

            - when:
                  # when not master => pull request => snapshot
                condition:
                    equal: [ master, << pipeline.git.branch >> ]
                steps:
                - run: echo "will release (build and test as well) the artifact to the artifact repo"
                - run: git config user.email "nicolas.camut@gmail.com"
                - run: git config user.name "Via CircleCI Build"
                - run:
                    name: Maven Deploy (Snapshot, build and test as well)
                    command: mvn --batch-mode release:prepare release:perform -s .circleci/settings.xml

    deploy-to-dev:
        docker:
            - image: cimg/base:2023.03
        resource_class: small
        steps:
            - run: echo "Deploying to dev"
    deploy-to-prod:
        docker:
            - image: cimg/base:2023.03
        resource_class: small
        steps:
            - run: echo "Deploying to prod"
workflows:
    build-and-deploy:
        jobs:
            - build
            - deploy-to-dev:
                filters:
                    branches:
                        only:
                            - master
                requires:
                    - build
            - wait-for-approval: # <<< A job that will require manual approval in the CircleCI web application.
                type: approval # This key-value pair will set your workflow to a status of "Needs Approval"
                requires: # We only run the "hold" job when test2 has succeeded
                    - deploy-to-dev
            - deploy-to-prod:
                # no need to filter in the master branch as the dependent job deploy-to-dev does it already
                requires:
                    - wait-for-approval
