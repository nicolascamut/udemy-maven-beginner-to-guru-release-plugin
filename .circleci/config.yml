# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
    # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
    build-and-test:
        # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
        # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
        docker:
          # See: https://circleci.com/developer/images/image/cimg/openjdk
          - image: cimg/openjdk:17.0

        working_directory: ~/repo

        # Add steps to the job
        # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
        steps:
            # Checkout the code as the first step.
            - checkout

            # Download and cache dependencies
            - restore_cache:
                  keys:
                      - v1-dependencies-{{ checksum "pom.xml" }}
                      # fallback to using the latest cache if no exact match is found
                      - v1-dependencies-

            - run: mvn dependency:go-offline

            - save_cache:
                  paths:
                      - ~/.m2
                  key: v1-dependencies-{{ checksum "pom.xml" }}

            # Use mvn clean and package as the standard maven build phase
            - run:
                name: Build
                command: mvn -B -DskipTests clean package

            # Then run your tests!
            - run:
                name: Test
                command: mvn integration-test
    deploy-to-dev:
        steps:
            - run: echo "Deploying to dev"
workflows:
    build:
        jobs:
            - build-and-test
            - deploy-to-dev:
                  filters:
                      branches:
                          only:
                              - master
